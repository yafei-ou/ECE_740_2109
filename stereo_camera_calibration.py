from cv2 import cv2
import numpy as np

#cameraMatrix1 = np.array([[690.163250872357, 2.41601039073355, 595.582453131795],[0, 690.885166954138, 321.252587118166],[0, 0, 1]])
#cameraMatrix2 = np.array([[697.043028906177, 1.78736647573395, 678.519794592295],[0, 697.473191915973, 332.994134531430],[0, 0, 1]])

cameraMatrix1 = np.array([[809.883176965966, 0.886034032625625, 316.494186415504],[0, 809.480527551197, 259.479954642016],[0, 0, 1]])
cameraMatrix2 = np.array([[807.831648614680, -0.788391545797257, 272.993913252552],[0,803.864772000702, 246.423205227026],[0, 0, 1]])

#distCoeffs1 = np.array([0.113171327179361, -0.223052702729170, -0.00431798214929362, 0.00799005596699588, 0.227272733842708])
#distCoeffs2 = np.array([0.0776155775343240, -0.0335775735626629, -0.00444136472048372, 0.00837310120534440, -0.0318980846301793])
distCoeffs1 = np.array([0.0256227635463143, 0.896159980382255, 0.00873083398185427, 0.00873083398185427, -3.25886055005505])
distCoeffs2 = np.array([-0.0369649324852416, 0.938013893397162, -0.000974301696704835, -0.0135007622685574, -2.53552387041851])


imageSize = (720, 480)
#R = np.array([[0.999999399716368, -0.000189182952579306, 0.00107924821677154],[0.000191954363321066, 0.999996683275144, -0.00256838319435259],[-0.00107875874288609, 0.00256858881899852, 0.999996119307997]])
#T = np.array([-59.7375578583981, -0.0411740896830731, 0.513384202938276])
R = np.array([[0.994185708978996, 0.0217522029478750, 0.105459080826859],[-0.0233882141594073, 0.999624161679240, 0.0143012875472788],[-0.105108360753868, -0.0166846352669367, 0.994320801072594]])
T = np.array([314.111143461680, -49.9034065181065, 18.4777366882179])

R1, R2, P1, P2, Q, validPixROI1, validPixROI2 = cv2.stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T)

print(P1)
print(P2)

# point1 = np.array([[263., 107.], [107., 518.]])
# point2 = np.array([[472., 84.], [85., 553.]])
point1 = np.array([[263., 107.], [100., 0.]])
point2 = np.array([[472., 84.], [100., 0.]])

pt1 = pt2 = 0

pt1	= cv2.undistortPoints(point1, cameraMatrix1, distCoeffs1, None, R1, P1)
pt2	= cv2.undistortPoints(point2, cameraMatrix2, distCoeffs2, None, R2, P2)

points4D = cv2.triangulatePoints(P1, P2, pt1, pt2)

points4D /= points4D[3]

print(points4D)
